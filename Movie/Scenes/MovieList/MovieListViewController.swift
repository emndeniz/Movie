//
//  MovieListViewController.swift
//  Movie
//
//  Created by Mehmet Emin Deniz on 9.03.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class MovieListViewController: UIViewController {
    
    // MARK: - Public properties -
    
    var presenter: MovieListPresenterInterface!
    @IBOutlet weak var loadingIdicator: UIActivityIndicatorView!
    
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var searchBar: UISearchBar!
    
    

    private let itemsPerRow: CGFloat = 2
    private let sectionInsets = UIEdgeInsets(top: 15.0,left: 15.0,bottom: 15.0,right: 15.0)
    private var searchQuerry:String?
    private var isSearching = false
    
    // MARK: - Lifecycle -
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.viewDidLoad()
        loadingIdicator.startAnimating()
    }
    
    
    private func reloadCollectionViewData(){
        collectionView.reloadData()
    }
}

// MARK: - Extensions -

extension MovieListViewController: MovieListViewInterface {
    func updateMovieList() {
        reloadCollectionViewData()
    }
}

extension MovieListViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        
        let availableMovieCount = presenter.getCurrentNumberOfMovies(isFiltered: isSearching)
        if section * 2 + 1 == availableMovieCount { //Prevent adding more items in section if not available
            return 1
        }
        return 2
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        if isSearching {
            // Calculation require in case current movie number is odd
            let num: Double = Double(presenter.getCurrentNumberOfMovies(isFiltered: isSearching))/2
            return Int(num.rounded(.up))
        }else {
            return presenter.getTotalNumberOfMovies()/2
        }
        
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "MovieCell", for: indexPath) as? MovieCell else {
            return UICollectionViewCell()
        }
        
        if loadingIdicator.isAnimating {
            loadingIdicator.stopAnimating()
        }
        
        if isLoadingCell(for: indexPath){
            presenter.fetchMoreMovie()
            loadingIdicator.startAnimating()
        }else {
            cell.setCellData(data: presenter.getMovieCell(indexPath: indexPath, isFiltered: isSearching))
        }
        cell.cellDelegate = self
        return cell
        
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        sizeForItemAt indexPath: IndexPath ) -> CGSize {
        let paddingSpace = sectionInsets.left * (itemsPerRow + 1)
        let availableWidth = view.frame.width - paddingSpace
        let widthPerItem = availableWidth / itemsPerRow
        
        return CGSize(width: widthPerItem, height: widthPerItem)
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        insetForSectionAt section: Int) -> UIEdgeInsets {
        return sectionInsets
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return sectionInsets.left
    }
}
extension MovieListViewController : UICollectionViewDataSourcePrefetching {
    func collectionView(_ collectionView: UICollectionView, prefetchItemsAt indexPaths: [IndexPath]) {
        print("Prefetch: \(indexPaths)")
        if indexPaths.contains(where: isLoadingCell) {
            presenter.fetchMoreMovie()
        }
    }
    
    func isLoadingCell(for indexPath: IndexPath) -> Bool {
        if isSearching {
            return false
        }
        let num = indexPath.row + indexPath.section * 2 + 10
        let result = num >= presenter.getCurrentNumberOfMovies(isFiltered: isSearching)
        return result
    }
    
    func visibleIndexPathsToReload(intersecting indexPaths: [IndexPath]) -> [IndexPath] {
        let indexPathsForVisibleRows = collectionView.indexPathsForVisibleItems
        let indexPathsIntersection = Set(indexPathsForVisibleRows).intersection(indexPaths)
        return Array(indexPathsIntersection)
    }
}

extension MovieListViewController: MovieCellDelegate {
    func didPressFavButton(isFavorited: Bool) {
        print("didPressStartButton")
    }
}


extension MovieListViewController : UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String){
        if searchText.isEmpty {
            // Search query deleted
            isSearching = false
            reloadCollectionViewData()
        }else {
            // Search query appending
            isSearching = true
            presenter.startLocalSearch(filter:searchText)
            reloadCollectionViewData()
        }
      
    }
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        searchBar.setShowsCancelButton(true, animated: true)
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.text = nil
        searchBar.setShowsCancelButton(false, animated: true)
        searchBar.resignFirstResponder()
        isSearching = false
        reloadCollectionViewData()
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        isSearching = true
        if let querry = searchBar.text {
            presenter.startLocalSearch(filter:querry)
            reloadCollectionViewData()
            searchBar.resignFirstResponder()
        }
    }
}
